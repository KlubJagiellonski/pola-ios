// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

{% if strings %}
import Foundation

enum {{enumName}} {
  {% for string in strings %}
  /// {{string.translation}}
  case {{string.key|swiftIdentifier|snakeToCamelCase}}{% if string.params %}({{string.params.types|join}}){% endif %}
  {% endfor %}
}

extension {{enumName}}: CustomStringConvertible {
  var description: String { return self.string }

  var string: String {
    switch self {
      {% for string in strings %}
      {% if string.params %}
      case .{{string.key|swiftIdentifier|snakeToCamelCase}}({{string.params.declarations|join}}):
        return {{enumName}}.tr("{{string.key}}", {{string.params.names|join}})
      {% else %}
      case .{{string.key|swiftIdentifier|snakeToCamelCase}}:
        return {{enumName}}.tr("{{string.key}}")
      {% endif %}
      {% endfor %}
    }
  }

  private static func tr(key: String, _ args: CVarArgType...) -> String {
    let appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
    let configurationManager = appDelegate.resolver.resolve(ConfigurationManager.self)!
    guard let format = configurationManager.translation(forKey: key), let locale = configurationManager.configuration?.locale else {
        return ""
    }
    return String(format: format, locale: locale, arguments: args)
  }
}

func tr(key: {{enumName}}) -> String {
  return key.string
}
{% else %}
// No string found
{% endif %}


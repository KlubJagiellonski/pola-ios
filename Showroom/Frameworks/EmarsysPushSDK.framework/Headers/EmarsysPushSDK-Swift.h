// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSNumber;

SWIFT_CLASS("_TtC14EmarsysPushSDK14EmarsysManager")
@interface EmarsysManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Sets the ID of your application in our Push Service Database.
+ (void)setApplicationID:(NSString * _Nonnull)applicationID;

/// Sets the Password of your application in our Push Service Database.
+ (void)setApplicationPassword:(NSString * _Nonnull)applicationPassword;

/// Sets hardware ID for your user.
///
/// <h2>Important Note</h2>
/// <ol><li>Whichever notification service you are using, pass in the provided Hardware ID.</li></ol>
+ (void)setCustomerHWID:(NSString * _Nonnull)customerHWID;

/// Format your respective currency to be displayed in a UIView of some kind. This is why it returns a String.
+ (NSString * _Nonnull)formatCurrency:(id _Nullable)price;

/// Records every single instance an app is opened/brought to the foreground.
///
/// <h2>Important Notes</h2>
/// <ol><li>Use this function in <em>didFinishLaunchingWithOptions</em> inside your <em>AppDelegate</em> file.</li><li>May also place this within <em>applicationWillEnterForeground</em>.</li></ol>
+ (void)appLaunch;

/// Lets our Push Service know that the user has Registered for Push Notifications
///
/// <h2>Important Notes</h2>
/// <ol><li>Place this in your <em>didRegisterForRemoteNotificationsWithDeviceToken</em> inside your <em>AppDelegate</em> file.</li></ol>
+ (void)pushAccepted:(NSString * _Nonnull)pushToken;

/// Creates a checkpoint for your app, whenever you want to record when the user has done a specific task.
///
/// <h2>Important Notes</h2>
/// <ol><li><em>checkpointName</em> is required, <em>attributes</em> are optional.</li><li>If you provide <em>attributes</em>, it must be a Dictionary.</li></ol>
+ (void)customEvent:(NSString * _Nonnull)eventName attributes:(NSDictionary<NSString *, id> * _Nullable)attributes;

/// Records contact data and stores it in the Emarsys Suite.
///
/// <h2>Important Notes</h2>
/// <ol><li><em>contactData</em> must be a Dictionary</li><li><em>mergeID</em> is optional. Default merge is field <em>3</em>, which corresponds to the <em>email</em> field.</li></ol>
+ (void)contactUpdate:(NSDictionary<NSString *, id> * _Nullable)contactData mergeID:(NSNumber * _Nullable)mergeID;

/// Logs the user out in the Application and creates an anonymous contact.
+ (void)logout;

/// Used to detect if a push message has been opened.  Pass in the message ID as a string from your Push Provider's JSON Payload.
+ (void)messageOpen:(NSString * _Nonnull)sid;

/// Returns a more readable representation of the model name of the current device.
+ (NSString * _Nonnull)getModelName;

/// Returns customer email.
+ (NSString * _Nonnull)getCustomerEmail;
@end


@interface UIDevice (SWIFT_EXTENSION(EmarsysPushSDK))
@end

#pragma clang diagnostic pop
